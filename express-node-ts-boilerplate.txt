Node-Express-TS Boilerplate
Packages to install
    npm install typescript express ts-node  @types/express   body-parser 
    npm install --save-dev @types/express @types/node concurrently nodemon jest 
Create files and Folders
—\src
—\src\controllers
—\public
--package.json
—\src\server.ts
—\src\app.ts
—\src\controllers\baseController.ts
Run
-- run tsc --init
	this creates tsc.config file
-- update tsc.config:
    -  add " "include": ["src/*.*","src/data"]"   at the editing
    - "outDir": "./public",
    - "rootDir": "./src",
    - "target": "ES6",
Scripts
"dev": "concurrently \"npx tsc --watch\" \"nodemon -q public/server.js\""


Main Files
app.ts 
import express , { Application,Request,Response,Router } from "express";
import bodyParser  from "body-parser";
import mongoose from "mongoose";
require("dotenv").config(); 

class App {
    public app: Application;
    public port: number;
    constructor(controllers:any,port:number){
        this.app = express();
        this.port = port;
        this.initializeMiddlewares();
        this.initializeDBConnection();
        this.initializeControllers(controllers)
    }

    private initializeMiddlewares= ()=>{
        this.app.use(bodyParser.json())
    }

    private initializeControllers = ((controllers: any) => {
        controllers.forEach((controller: any) =>{
            this.app.use('/',controller.router)
        })
    })
    public listen = () =>{
        this.app.listen(this.port,()=> {
            console.log(`App listening on port ${this.port}`)
        })
    }

    private initializeDBConnection = () => {
        mongoose.connect(`${process.env.TM_DB_CONNECTION}`);
        const db = mongoose.connection;
        db.on("error", console.error.bind(console, "connection error: "));
        db.once("open", function () { console.log("Connected successfully"); });  }
   }
   
export default App

server.ts 
import App from "./app"
import BaseController from "./controllers/baseController"

const app:App = new App (
    [
        new BaseController()
    ],
    5300
)
app.listen()

baseController.ts
import express, {Request, Response, Router } from 'express';

class BaseController {
    public router = express.Router()
    public path = "/"

    constructor(){
        this.initRoutes();
    }

    private initRoutes () {
        this.router.get("/",this.getHP)
    }

    private getHP(req:Request, res:Response) {
        res.status(200).json({message: "welcome"})
    }
}
export default BaseController



interfaces
1. define interfaces for entities
*/
